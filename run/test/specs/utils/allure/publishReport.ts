import fs from 'fs-extra';
import path from 'path';
import { exec } from 'child_process';
import { getRunFinishTime } from './getRunFinishTime';
import { allureCurrentReportDir, allureReportsDir } from '../../../../constants/allure';

async function publishReport() {
  // Path to the environment.json file generated by Allure
  const environmentFile = path.join(allureCurrentReportDir, 'widgets', 'environment.json');

  if (!(await fs.pathExists(environmentFile))) {
    console.error(`Environment file not found at ${environmentFile}`);
    process.exit(1);
  }

  // Read and parse the environment.json file
  const jsonContent = await fs.readFile(environmentFile, 'utf8');
  let envData;
  try {
    envData = JSON.parse(jsonContent);
  } catch (err) {
    console.error('Error parsing environment.json:', err);
    process.exit(1);
  }

  // Extract platform and build from the array data
  let platform = 'unknown';
  let build = 'unknown';
  if (Array.isArray(envData)) {
    for (const item of envData) {
      if (item.name === 'platform' && Array.isArray(item.values) && item.values.length > 0) {
        platform = item.values[0];
      }
      if (item.name === 'build' && Array.isArray(item.values) && item.values.length > 0) {
        build = item.values[0];
      }
    }
  }

  console.log(`Extracted platform: ${platform}, build: ${build}`);

  // Define the new report folder name, e.g. allure-report-2025-03-14-13:24-ios-2.8.7
  const baseReportDir = allureCurrentReportDir;
  const runFinishDate = await getRunFinishTime();
  const publishedReportName = `allure-report-${runFinishDate}-${platform}-${build}`;
  const newReportDir = path.join(allureReportsDir, publishedReportName);

  // Copy the base report folder to the new folder
  try {
    await fs.copy(baseReportDir, newReportDir, { overwrite: true });
    console.log(`Report copied to ${newReportDir}`);
  } catch (err) {
    console.error('Error copying report folder:', err);
    process.exit(1);
  }

  // Deploy the new report folder to GitHub Pages using gh-pages
  const deployCommand = `gh-pages -d ${newReportDir} --dest reports/${publishedReportName} --message "ci: publish Allure report for ${platform} ${build}"`;
  console.log(`Deploying report with command: ${deployCommand}`);
  exec(deployCommand, (error, stdout, _stderr) => {
    if (error) {
      console.error(
        `Error deploying report: ${error instanceof Error ? error.message : String(error)}`
      );
      return;
    }
    console.log('Report deployed successfully.');
    console.log(stdout);
  });
}

publishReport().catch(err => {
  console.error('Error in publishReport script:', err);
});