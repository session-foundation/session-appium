name: iOS regression tests
run-name: 'iOS regression with risk: "${{ inputs.RISK }}"'

on:
  workflow_dispatch:
    inputs:
      APK_URL:
        description: 'ipa url to test'
        required: true
        type: string
        default: https://oxen.rocks/session-foundation/session-ios/dev/session-ios-20250408T201952Z-233314350-sim.tar.xz

      RISK:
        description: 'risks to target'
        required: false
        type: choice
        options:
          - 'high-risk'
          - 'medium-risk'
          - 'low-risk'
          - ''

      PLAYWRIGHT_RETRIES_COUNT:
        description: 'retries of failing tests to do at most'
        required: true
        type: choice
        options:
          - '0'
          - '1'
          - '2'
        default: '0'

      PRINT_FAILED_TEST_LOGS:
        description: 'print failed test logs (1 to enable) - DONT DO FOR FULL REGRESSION (it crashes github)'
        required: true
        type: choice
        options:
          - '0'
          - '1'
        default: '0'
      PRINT_ONGOING_TEST_LOGS:
        description: 'print ongoing test logs (1 to enable) - DONT DO FOR FULL REGRESSION (it crashes github)'
        required: true
        type: choice
        options:
          - '0'
          - '1'
        default: '0'
      PLAYWRIGHT_WORKERS_COUNT:
        description: 'number of workers to use'
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '3'
        default: '3'

jobs:
  ios-regression:
    runs-on: [self-hosted, macOS]
    env:
      IOS_APP_PATH_PREFIX: './extracted/Session.app'
      ANDROID_APK: '<just_not_empty>'
      PLAYWRIGHT_RETRIES_COUNT: ${{ github.event.inputs.PLAYWRIGHT_RETRIES_COUNT }}
      PRINT_FAILED_TEST_LOGS: ${{ github.event.inputs.PRINT_FAILED_TEST_LOGS }}
      PRINT_ONGOING_TEST_LOGS: ${{ github.event.inputs.PRINT_ONGOING_TEST_LOGS }}
      PLAYWRIGHT_WORKERS_COUNT: ${{ github.event.inputs.PLAYWRIGHT_WORKERS_COUNT }}
      PLAYWRIGHT_REPEAT_COUNT: 0
      IOS_1_SIMULATOR: '4A75A0E1-9EDE-4169-93C3-DCE0F0C7664F'
      IOS_2_SIMULATOR: 'ACB6A587-8556-4EA0-87CF-4326A9A22051'
      IOS_3_SIMULATOR: 'D90B2AE2-FF30-49BE-9370-B789BAEED3BB'
      IOS_4_SIMULATOR: '59BD1CA4-7A8D-40FB-BAC7-CC99500644E0'
      IOS_5_SIMULATOR: '064F4F80-B81C-4B72-9715-43CD18975139'
      IOS_6_SIMULATOR: '56D8BA2F-BA0C-4D8F-8E5B-FD928E2C7C66'
      IOS_7_SIMULATOR: '012D6656-D6DE-4932-A460-72F5629EB2E0'
      IOS_8_SIMULATOR: 'D66CBD9C-7550-4055-8504-95F0AE700617'
      IOS_9_SIMULATOR: '84884861-F8EF-4481-A001-B403F2649FCF'
      IOS_10_SIMULATOR: 'C0EE6A21-044D-4B6E-B9A5-7AB977ADF305'
      IOS_11_SIMULATOR: 'B8E78B21-1432-41F3-A398-DE4FF8CF9DED'
      IOS_12_SIMULATOR: '8214A3A2-D4E1-4AA8-BB0F-394E3A49BCFA'

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Runner Details
        run: |
          echo "APK_URL ${{ github.event.inputs.APK_URL }}"
          echo "RISK ${{ github.event.inputs.RISK }}"

      - name: Download ipa
        run: |
          curl -o session-ios.sim.tar.xz ${{ github.event.inputs.APK_URL }}
          ls
          pwd

      - name: Extract app
        run: |
          tar xf session-ios.sim.tar.xz
          mkdir -p extracted
          mv session-ios-*-sim/*.app extracted/
          ls extracted

      - name: Verify extracted files
        run: |
          ls extracted

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install yarn
        run: |
          npm install -g yarn
          corepack enable
          yarn set version 4.1.1

      - name: Install test dependencies
        run: |
          ls
          git status
          yarn install --immutable

      - name: Start Appium server
        run: |
          yarn start-appium-server

      - name: Build the iOS tests
        run: |
          yarn tsc

      - name: Stop simulators
        shell: bash
        run: |
          npx --yes ts-node scripts/stop_ios.ts

      - name: Start simulators
        shell: bash
        if: false # appium is starting the simulators (seems to be somewhat more reliable)
        run: |
          npx --yes ts-node scripts/start_ios.ts # don't auto start the simulators, let appium do it (seems somewhat more reliable)

      - name: Clean old prebuilt wda
        shell: bash
        run: |
          rm -rf /tmp/wda

      - name: Build WDA for all simulators
        shell: bash
        run: |
          npx --yes ts-node scripts/build_wda_ios.ts # rebuild wda for all simulators (separately, until we have a better way)

      - name: List all tests
        run: |
          pwd
          yarn test "ios @${{ github.event.inputs.RISK }}" --list
      - name: Run the iOS tests
        run: |
          pwd
          yarn test "ios @${{ github.event.inputs.RISK }}"

      - name: Stop emulators
        if: always()
        continue-on-error: true # just so we don't fail
        shell: bash
        run: |
          npx --yes ts-node scripts/stop_ios.ts
