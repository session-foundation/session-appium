name: Android regression tests
run-name: '${{ inputs.RISK }} regressions on ${{ github.head_ref || github.ref }}'

on:
  workflow_dispatch:
    inputs:
      RUNNER: 
        description: 'Which runner to use'
        required: true
        type: choice 
        options: 
          - 'linux'
          - 'mac'
        default: 'linux'
      APK_URL:
        description: 'apk url to test (.tar.xz)'
        required: true
        type: string

      BUILD_NUMBER:
        description: 'build number used for the report (e.g. 1.25.0)'
        required: true
        type: string

      RISK:
        description: 'risks to target'
        required: false
        type: choice
        options:
          - 'high-risk'
          - 'medium-risk'
          - 'low-risk'
          - ''

      ALLURE_ENABLED:
        description: 'generate allure report'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

      PLAYWRIGHT_RETRIES_COUNT:
        description: 'retries of failing tests to do at most'
        required: true
        type: choice
        options:
          - '0'
          - '1'
          - '2'
        default: '0'

      PRINT_FAILED_TEST_LOGS:
        description: 'print failed test logs (1 to enable) - DONT DO FOR FULL REGRESSION (it crashes github)'
        required: true
        type: choice
        options:
          - '0'
          - '1'
        default: '0'
      PRINT_ONGOING_TEST_LOGS:
        description: 'print ongoing test logs (1 to enable) - DONT DO FOR FULL REGRESSION (it crashes github)'
        required: true
        type: choice
        options:
          - '0'
          - '1'
        default: '0'
      HIDE_WEBDRIVER_LOGS:
        description: 'print webdriver logs (1 to hide, 0 to show). PRINT_ONGOING_TEST_LOGS or PRINT_FAILED_TEST_LOGS must be 1'
        required: true
        type: choice
        options:
          - '0'
          - '1'
        default: '1'

jobs:
  android-regression:
    runs-on: ${{ github.event.inputs.RUNNER == 'mac' && fromJSON('["self-hosted", "macOS"]') || fromJSON('["self-hosted", "linux", "X64", "qa-android"]') }}
    env:
      PLATFORM: 'android'
      EMULATOR_COUNT: ${{ github.event.inputs.RUNNER == 'mac' && '6' || '4' }}
      APK_URL: ${{ github.event.inputs.APK_URL }}
      BUILD_NUMBER: ${{ github.event.inputs.BUILD_NUMBER }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CI: 1
      ALLURE_ENABLED: ${{ github.event.inputs.ALLURE_ENABLED}}
      IOS_APP_PATH_PREFIX: '<just_not_empty>'
      ANDROID_APK: './extracted/session-android.apk'
      PLAYWRIGHT_RETRIES_COUNT: ${{ github.event.inputs.PLAYWRIGHT_RETRIES_COUNT }}
      PRINT_FAILED_TEST_LOGS: ${{ github.event.inputs.PRINT_FAILED_TEST_LOGS }}
      PRINT_ONGOING_TEST_LOGS: ${{ github.event.inputs.PRINT_ONGOING_TEST_LOGS }}
      IOS_1_SIMULATOR: '<just_not_empty>'
      IOS_2_SIMULATOR: '<just_not_empty>'
      IOS_3_SIMULATOR: '<just_not_empty>'
      IOS_4_SIMULATOR: '<just_not_empty>'
      IOS_5_SIMULATOR: '<just_not_empty>'
      IOS_6_SIMULATOR: '<just_not_empty>'
      IOS_7_SIMULATOR: '<just_not_empty>'
      IOS_8_SIMULATOR: '<just_not_empty>'
      IOS_9_SIMULATOR: '<just_not_empty>'
      IOS_10_SIMULATOR: '<just_not_empty>'
      IOS_11_SIMULATOR: '<just_not_empty>'
      IOS_12_SIMULATOR: '<just_not_empty>'

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      # This is necessary because the macOS runner was not always pulling the lfs files despite checkout with lfs: true 
      # Check if LFS files were actually pulled 
      - name: Verify LFS files 
        run: |
          echo "Ensuring all LFS screenshot files are downloaded..."
          git lfs pull --include="run/screenshots/**/*.png"
          
          echo "=== Verifying screenshot files ==="
          corrupted_files=0
          total_files=0
          
          for file in run/screenshots/**/*.png; do
            if [[ -f "$file" ]]; then  # Make sure file exists (in case glob doesn't match anything)
              ((total_files++))
              if file "$file" | grep -q "PNG image"; then
                echo "✅ $file"
              else
                echo "⚠️  WARNING: $file is not a PNG image - related tests may fail"
                # Show what it actually is for debugging
                echo "   File type: $(file "$file")"
                ((corrupted_files++))
              fi
            fi
          done
          
          echo "📊 Screenshot verification: $((total_files - corrupted_files))/$total_files files valid"
          
          if [ $corrupted_files -gt 0 ]; then
            echo "⚠️ Found $corrupted_files corrupted screenshot files"
            echo "📝 Tests using these files will be skipped or may fail"
          else
            echo "✅ All screenshot files are valid PNG images"
          fi

      - name: Fetch result history from gh-pages
        uses: ./github/actions/fetch-allure-history
        if: ${{ env.ALLURE_ENABLED == 'true' }}
        with:
          PLATFORM: ${{env.PLATFORM}}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN}}

      - uses: ./github/actions/print-runner-details
        with:
          APK_URL: ${{ github.event.inputs.APK_URL }}
          RISK: ${{ github.event.inputs.RISK }}
          PRINT_FAILED_TEST_LOGS: ${{ github.event.inputs.PRINT_FAILED_TEST_LOGS }}
          PRINT_ONGOING_TEST_LOGS: ${{ github.event.inputs.PRINT_ONGOING_TEST_LOGS }}
          PLAYWRIGHT_RETRIES_COUNT: ${{ github.event.inputs.PLAYWRIGHT_RETRIES_COUNT }}

      - name: Download APK & extract it
        run: |
          pwd
          curl -L -o session-android.apk.tar.xz ${{ github.event.inputs.APK_URL }}
          tar xf session-android.apk.tar.xz
          mv session-android-*universal extracted

          if ls extracted/*automaticQa.apk; then
            mv extracted/*automaticQa.apk extracted/session-android.apk
            echo "IS_AUTOMATIC_QA=true" >> $GITHUB_ENV
          elif ls extracted/*qa.apk; then
            mv extracted/*qa.apk extracted/session-android.apk
            echo "IS_AUTOMATIC_QA=false" >> $GITHUB_ENV
          else
            echo "Error: No .qa APK found (only .qa builds are supported)"
            exit 1
          fi

      - name: Setup for both platforms
        uses: ./github/actions/setup

      - name: Restart adb server
        shell: bash
        continue-on-error: true # just so we don't fail if adb wasn't already running
        run: |
          source ./scripts/ci.sh
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          adb kill-server;
          adb start-server;

      - name: Start emulators from snapshot
        shell: bash
        run: |
          source ./scripts/ci.sh
          start_for_snapshots
          wait_for_emulators

      - name: List tests part of this run
        uses: ./github/actions/list-tests
        with:
          PLATFORM: ${{ env.PLATFORM }}
          RISK: ${{ github.event.inputs.RISK }}

      - name: Run the 1-devices tests ​​with 4 workers
        continue-on-error: true
        id: devices-1-test-run
        env:
          PLAYWRIGHT_WORKERS_COUNT: ${{ env.EMULATOR_COUNT }}  # 6 on mac, 4 on linux
          DEVICES_PER_TEST_COUNT: 1
        run: |
          pwd
          TESTING=${{ github.event.inputs.HIDE_WEBDRIVER_LOGS }} npx playwright test --grep "(?=.*@${PLATFORM})(?=.*@${DEVICES_PER_TEST_COUNT}-devices)(?=.*@${{ github.event.inputs.RISK }})" #Note: this has to be double quotes

      - name: Upload results of this run
        uses: ./github/actions/upload-test-results
        with:
          PLATFORM: ${{ env.PLATFORM }}
          UPLOAD_IDENTIFIER: 'devices-1-test-run'

      - name: Run the 2-devices tests ​​with 2 workers
        continue-on-error: true
        id: devices-2-test-run
        env:
          PLAYWRIGHT_WORKERS_COUNT:  ${{ github.event.inputs.RUNNER == 'mac' && '3' || '2' }}
          DEVICES_PER_TEST_COUNT: 2
        run: |
          pwd
          _TESTING=${{ github.event.inputs.HIDE_WEBDRIVER_LOGS }} npx playwright test --grep "(?=.*@${PLATFORM})(?=.*@${DEVICES_PER_TEST_COUNT}-devices)(?=.*@${{ github.event.inputs.RISK }})" #Note: this has to be double quotes

      - name: Upload results of this run
        uses: ./github/actions/upload-test-results
        with:
          PLATFORM: ${{ env.PLATFORM }}
          UPLOAD_IDENTIFIER: 'devices-2-test-run'

      - name: Run the tests ​​other tests with 1 worker
        continue-on-error: true
        id: other-devices-test-run
        env:
          PLAYWRIGHT_WORKERS_COUNT: ${{ github.event.inputs.RUNNER == 'mac' && '2' || '1' }}
          DEVICES_PER_TEST_COUNT: 3
        run: |
          pwd
          _TESTING=${{ github.event.inputs.HIDE_WEBDRIVER_LOGS }} npx playwright test --grep "(?=.*@${PLATFORM})(?=.*@${{ github.event.inputs.RISK }})" --grep-invert "@1-devices|@2-devices" #Note: this has to be double quotes

      - name: Generate and publish test report
        uses: ./github/actions/generate-publish-test-report
        if: ${{ always() && env.ALLURE_ENABLED == 'true' }}
        with:
          PLATFORM: ${{ env.PLATFORM }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APK_URL: ${{env.APK_URL}}
          RISK: ${{github.event.inputs.RISK}}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}

      - name: Upload results of this run
        uses: ./github/actions/upload-test-results
        with:
          PLATFORM: ${{ env.PLATFORM }}
          UPLOAD_IDENTIFIER: 'devices-other-test-run'

      - name: Upload csv of this whole run
        uses: ./github/actions/upload-csv-test-results
        if: always()
        with:
          PLATFORM: ${{ env.PLATFORM }}

      - name: Check if any tests failed
        if: steps.devices-1-test-run != 'success' || steps.devices-2-test-run != 'success' || steps.other-devices-test-run.outcome != 'success'
        run: echo 'Some test failed, see above'; exit 1

      - name: Stop emulators
        if: always()
        continue-on-error: true # just so we don't fail
        shell: bash
        run: |
          source ./scripts/ci.sh
          killall_emulators
